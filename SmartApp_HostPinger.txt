import groovy.json.JsonBuilder

/**
 *  Host Pinger - SmartThings
 *
 *  Copyright 2016 Jake Tebbett
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 * VERSION CONTROL
 * ###############
 *
 *  v1.0 - Release Version
 *
 */

definition(
    name: "Host Pinger",
    namespace: "jebbett",
    author: "Jake Tebbett",
    description: "Capture ping result events to control virtul switches",
    category: "My Apps",
    iconUrl: "https://cdn1.iconfinder.com/data/icons/technology-and-hardware-2/200/vector_66_11-64.png",
    iconX2Url: "https://cdn1.iconfinder.com/data/icons/technology-and-hardware-2/200/vector_66_11-64.png",
    iconX3Url: "https://cdn1.iconfinder.com/data/icons/technology-and-hardware-2/200/vector_66_11-64.png",
    singleInstance: true,
    oauth: [displayName: "HostPingState", displayLink: ""])


def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
    generateAccessToken()
    logWriter("APP_ID: $app.id")
    logWriter("ACCESS_TOKEN: $state.accessToken")
    
    if(state.lastEvent == null){state.lastEvent = "No event recieved, please ensure that config.config is setup correctly"}
}

def generateAccessToken() {
	if (!state.accessToken) {
		try {
        	createAccessToken()
		} catch(e) {
        	state.installedOK = "No"
        	log.error "Error: $e"
			return false
		}
	}
    state.installedOK = "Yes"
    return true
}

preferences {
	page(name: "mainMenu")
    page(name: "lastEvt")
    page(name: "EndPointInfo")
    page(name: "pageDevice")
    page(name: "pageDevDetails")
    page(name: "pageDevDelete")
    page(name: "pageDevAdd")
    
}

def mainMenu() {

    dynamicPage(name: "mainMenu", title: "Host Pinger SmartApp", install: true, uninstall: true, submitOnChange: true) {              
       	//section() {
        //	href(name: "pageDevice", title: "Host Ping Devices", required: false, page: "pageDevice", description: "create a virtual device here")
    	//}
        pageDevice()
        
	    section(title: "ADVANCED") {
           	href(name: "LastEvent", title: "Events Recieved", required: false, page: "lastEvt", description: "")
           	href(name: "Setup Details", title: "Endpoint Setup Details", required: false, page: "EndPointInfo", description: "")
            input "debugLogging", "bool", title: "Debug Logging", required: false, defaultValue: false, submitOnChange: true
    	}
	}
}



def pageDevice() {

    //dynamicPage(name: "pageDevice", title: "Create Device", install: false, uninstall: false) {        


	section() {
        
        def greenOrRed = ""
        def i = 1 as int
        
        getSortedDevices().each { dev ->            

        	if(dev.switchState?.value == null){greenOrRed = "https://cdn2.iconfinder.com/data/icons/function_icon_set/warning_48.png"}
            else if(dev.switchState.value == "on"){greenOrRed = "https://cdn2.iconfinder.com/data/icons/function_icon_set/circle_green.png"}
            else{greenOrRed = "https://cdn2.iconfinder.com/data/icons/function_icon_set/circle_red.png"}
            
        	href(name: "pageDevDetails$i", title:"$dev.label", description: "", params: [devi: dev.deviceNetworkId, devstate: dev.switchState?.value], page: "pageDevDetails", required: true, state: "complete", image: "$greenOrRed")
            i++
            }
        }
        section(title: "Please ensure that the custom device type is installed!"){
        	href(name: "pageDevDetails", title:"Create New Device", description: "", params: [devi: false], page: "pageDevDetails", required: true, state: "complete", image: "https://cdn2.iconfinder.com/data/icons/function_icon_set/add_48.png")
    	}
	//}
}

private getSortedDevices() {
	return getChildDevices().sort{it.displayName}
}

def pageDevDetails(params) {    
    dynamicPage(name: "pageDevDetails", title: "Device Details", install: false, uninstall: false) {
		if(params.devi){
			section("Status") {                
                if(params.devstate == null){paragraph("Device Status: No Status Recieved - Check config.config", required: false)}
            	else if(params.devstate == "on"){paragraph("Device Status: Online", required: true, state: "complete")}
            	else{paragraph("Device Status: Offline", required: true)}
            }
            section("DELETE") {
            	href(name: "pageDevDelete", title:"DELETE DEVICE", description: "ONLY PRESS IF YOU ARE SURE!", params: [devi: "$params.devi"], page: "pageDevDelete", required: true, state: null, image: "https://cdn0.iconfinder.com/data/icons/round-ui-icons/128/close_red.png")
        	}
   		}else{
       		section() {
        		paragraph("Create a new Host Ping Device")
                input "devName", type: "text", title: "IP Or Host Name:", required:false, submitOnChange: true
            	href(name: "pageDevAdd", title:"Create Device", description: "", params: [devi: "$params.devi"], page: "pageDevAdd", required: true, state: null, image: "https://cdn0.iconfinder.com/data/icons/round-ui-icons/128/add_green.png")
        	}
		}    
  	}   
}


def pageDevAdd(params) {
	if(settings.devName){
    	def DeviceID = "HostPingDev:"+settings.devName
		def existingDevice = getChildDevice(DeviceID)
		if(!existingDevice) {
        	def newTrigger = addChildDevice("jebbett", "Host Ping Device", DeviceID, null, [name: "PING: ${settings.devName}", label: "PING: ${settings.devName}"])
		}
        pageDevice()
	}else{
    	dynamicPage(name: "pageDevAdd", title: "Device Details", install: false, uninstall: false) {        
			section() {
            	paragraph("Name not set")
        	}
		}
	}
}

def pageDevDelete(params) {
   	deleteChildDevice(params.devi)
	pageDevice()
}



def lastEvt() {

    dynamicPage(name: "lastEvt", title: "Last Event", install: false, uninstall: false) {        
        section(title: "Details of Last Event Recieved") {
            input "evtLogNum", "number", title: "Number Of Rows To Log", required: true, defaultValue: 20, submitOnChange: false
        	paragraph "${trimmedLog()}"
            logWriter("IP LOG OUTPUT:\n${trimmedLog()}")
        }
    }
}

def EndPointInfo() {

    dynamicPage(name: "EndPointInfo", title: "End Point Information", install: false, uninstall: false) {
    	section(title: "App ID") {
        	paragraph "$app.id"
        }
        section(title: "Access Token") {
        	if(!state.accessToken){
        		paragraph("You will need to enable OAuth in IDE, this can be found here:\n'My SmartApps' > App Settings", title: "OAuth Not Enabled", required: true, state: null)
        	}else{
        		paragraph "$state.accessToken"
        	}
        }
    }
}


// These Methods Generate Json for you Info Only
def appInfoJson() {
	def configJson = new groovy.json.JsonOutput().toJson([
    	appId:        app.id,
    	accessToken:  state.accessToken,        
    ])

    def configString = new groovy.json.JsonOutput().prettyPrint(configJson)
    render contentType: "text/plain", data: configString
}


mappings {
  path("/statechanged/:command") 	{ action: [ GET: "OnCommandRecieved" ] }
  path("/appinfo") 					{ action: [ GET: "appInfoJson"]   }
}

private def logWriter(value) {
	if (debugLogging) {log.debug "${value}"}	
}


def OnCommandRecieved() {
	def command = params.command
    def host = params.ipadd
    
    logWriter("Event Recieved: ${command} ${host}")
    StoreLastEvent(command, host)
    
    getChildDevices().each { dev ->
    	if(dev.deviceNetworkId == "HostPingDev:${host}"){
        	if(command == "online"){
            	dev.on()
            }else{
            	dev.off()
            }
    	}
    }
    
    return
}

def StoreLastEvent(command, host) {
    // Update Entry
    state.lastEvent = "${new Date(now()).format("dd MMM HH:mm", location.timeZone)} - ${host} [${command}]\n"+state.lastEvent
}


def trimmedLog(){
	//defult to length of 20 entries if none set
    int logLength = 0
    if(settings?.evtLogNum==null){logLength = 20}else{logLength = evtLogNum}
    def logdetails = state.lastEvent as String
    def delimiter = "]" as String

    //Get lines in log
    int count = logdetails.length() - logdetails.replace("]", "").length();
    
    // Delete row if log exceeds desired length
    if(count >= logLength){
    	
        // get last character number for number of entries 
    	def trimLength = nthIndexOf(logdetails, delimiter, logLength)
        
        // update state
       	logdetails = logdetails.substring(0, trimLength+1)
        state.lastEvent = logdetails
        
    }
    return logdetails
}

public static int nthIndexOf(String source, String sought, int n) {
    int index = source.indexOf(sought);
    if (index == -1) return -1;
    
    for (int i = 1; i < n; i++) {
        index = source.indexOf(sought, index + 1);
        if (index == -1) return -1;
    }
    return index;
}